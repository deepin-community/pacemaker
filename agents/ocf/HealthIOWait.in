#!/bin/sh
#
# ocf:pacemaker:HealthIOWait resource agent
#
# Copyright 2004-2023 the Pacemaker project contributors
#
# The version control history for this file may have further details.
#
# This source code is licensed under the GNU General Public License version 2
# (GPLv2) WITHOUT ANY WARRANTY.
#

#
# Measures CPU iowait % via top and writes #health-iowait status into the CIB
#
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS:="${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs"}
. "${OCF_FUNCTIONS}"
: ${__OCF_ACTION:="$1"}

#######################################################################

meta_data() {
        cat <<END
<?xml version="1.0"?>
<resource-agent name="HealthIOWait" version="@VERSION@">
<version>1.1</version>

<longdesc lang="en">
System health agent that measures the CPU iowait via top and updates the #health-iowait attribute.
</longdesc>
<shortdesc lang="en">System health based on CPU iowait measurement</shortdesc>

<parameters>
<parameter name="state" unique-group="state">
<longdesc lang="en">
Location to store the resource state in.
</longdesc>
<shortdesc lang="en">State file</shortdesc>
<content type="string" default="${HA_VARRUN%%/}/health-iowait-${OCF_RESOURCE_INSTANCE}.state" />
</parameter>

<parameter name="yellow_limit">
<longdesc lang="en">
Upper limit of iowait percentage to switch the health attribute to yellow. I.e.
the #health-iowait will go yellow if the %iowait of the CPU gets higher than 10%.
</longdesc>
<shortdesc lang="en">Upper limit for yellow health attribute</shortdesc>
<content type="integer" default="10"/>
</parameter>

<parameter name="red_limit">
<longdesc lang="en">
Upper limit of iowait percentage to switch the health attribute to red. I.e.
the #health-iowait will go red if the %iowait of the CPU get higher than 15%.
</longdesc>
<shortdesc lang="en">Upper limit for red health attribute</shortdesc>
<content type="integer" default="15"/>
</parameter>

</parameters>

<actions>
<action name="start"        timeout="10s" />
<action name="stop"         timeout="10s" />
<action name="monitor"      timeout="10s" interval="10s" start-delay="0s" />
<action name="meta-data"    timeout="5s" />
<action name="validate-all" timeout="10s" depth="0" />
</actions>
</resource-agent>
END
}

#######################################################################

agent_usage() {
        cat <<END
usage: $0 {start|stop|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

agent_start() {
    agent_monitor
    if [ $? -eq $OCF_SUCCESS ]; then
      return $OCF_SUCCESS
    fi
    touch "${OCF_RESKEY_state}"
}

agent_stop() {
    agent_monitor
    if [ $? -eq $OCF_SUCCESS ]; then
        rm "${OCF_RESKEY_state}"
    fi
    return $OCF_SUCCESS
}

agent_monitor() {
        # Monitor _MUST!_ differentiate correctly between running
        # (SUCCESS), failed (ERROR) or _cleanly_ stopped (NOT RUNNING).
        # That is THREE states, not just yes/no.
        if [ -f "${OCF_RESKEY_state}" ]; then
          WAIT=$(top -b -n2 | grep Cpu | tail -1 | awk -F",|.[0-9][ %]wa" '{ print $5 }')
          # echo "System iowait: " $WAIT
          # echo $OCF_RESKEY_yellow_limit
          if [ $WAIT -gt ${OCF_RESKEY_red_limit} ] ; then
            # echo "System state RED!"
            attrd_updater -n "#health-iowait" -U "red" -d "5s"
            return $OCF_SUCCESS
          fi

          if [ $WAIT -gt ${OCF_RESKEY_yellow_limit} ] ; then
            # echo "System state yellow."
            attrd_updater -n "#health-iowait" -U "yellow" -d "5s"
          else
            # echo "System state green."
            attrd_updater -n "#health-iowait" -U "green" -d "5s"
          fi
          return $OCF_SUCCESS
        fi
        return $OCF_NOT_RUNNING
}

is_integer() {
    case "$1" in
        ""|*[0-9]*) return 0 ;;
        *)          return 1 ;;
    esac
}

is_writable_dir() {
    dir=$(dirname "$1")
    [ -d "$dir" ] && [ -w "$dir" ] && [ -x "$dir" ]
}

agent_validate() {

    is_integer "$OCF_RESKEY_yellow_limit" && is_integer "$OCF_RESKEY_red_limit"
    if [ $? -ne 0 ]; then
        return $OCF_ERR_CONFIGURED
    fi

    if [ "$OCF_CHECK_LEVEL" = "10" ]; then
        is_writable_dir "$OCF_RESKEY_state"
        if [ $? -ne 0 ]; then
          return $OCF_ERR_ARGS
        fi
    fi

    return $OCF_SUCCESS
}

: ${OCF_RESKEY_CRM_meta_interval:=0}
: ${OCF_RESKEY_CRM_meta_globally_unique:="false"}

if [ -z "$OCF_RESKEY_state" ]; then
    if [ "${OCF_RESKEY_CRM_meta_globally_unique}" = "false" ]; then
      state="${HA_VARRUN%%/}/HealthIoWait-${OCF_RESOURCE_INSTANCE}.state"
      #Strip off the trailing clone marker
      OCF_RESKEY_state=$(echo $state | sed s/:[0-9][0-9]*\.state/.state/)
    else
      OCF_RESKEY_state="${HA_VARRUN%%/}/HealthIoWait-${OCF_RESOURCE_INSTANCE}.state"
    fi
fi

if [ -z "${OCF_RESKEY_red_limit}" ] ; then
  OCF_RESKEY_red_limit=15
fi

if [ -z "${OCF_RESKEY_yellow_limit}" ] ; then
  OCF_RESKEY_yellow_limit=10
fi

case $__OCF_ACTION in
meta-data)      meta_data
                exit $OCF_SUCCESS
                ;;
start)          agent_start;;
stop)           agent_stop;;
monitor)        agent_monitor;;
validate-all)   agent_validate;;
usage|help)     agent_usage
                exit $OCF_SUCCESS
                ;;
*)              agent_usage
                exit $OCF_ERR_UNIMPLEMENTED
                ;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc

# vim: set filetype=sh expandtab tabstop=4 softtabstop=4 shiftwidth=4 textwidth=80:
